#include <stdio.h>
#include <stdlib.h> // <- adiciona esta linha para usar abs()

#define TAM_TABULEIRO 10
#define TAM_HABILIDADE 5 // habilidades 5x5
#define AGUA 0
#define NAVIO 3
#define HABILIDADE 5

/*
    Programa: Batalha Naval - Nível Mestre
    Objetivo: Exibir o tabuleiro 10x10 com navios e habilidades especiais (cone, cruz e octaedro)
    Autor: [Seu Nome]
    Data: [Data de hoje]
*/

void inicializarTabuleiro(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO]);
void exibirTabuleiro(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO]);
void criarHabilidadeCone(int cone[TAM_HABILIDADE][TAM_HABILIDADE]);
void criarHabilidadeCruz(int cruz[TAM_HABILIDADE][TAM_HABILIDADE]);
void criarHabilidadeOctaedro(int octaedro[TAM_HABILIDADE][TAM_HABILIDADE]);
void aplicarHabilidade(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO], int habilidade[TAM_HABILIDADE][TAM_HABILIDADE], int origemLinha, int origemColuna);

int main() {
    int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO];
    int cone[TAM_HABILIDADE][TAM_HABILIDADE];
    int cruz[TAM_HABILIDADE][TAM_HABILIDADE];
    int octaedro[TAM_HABILIDADE][TAM_HABILIDADE];

    // 1️⃣ Inicializar tabuleiro
    inicializarTabuleiro(tabuleiro);

    // 2️⃣ Posicionar alguns navios (valores fixos apenas para visualização)
    tabuleiro[2][1] = NAVIO;
    tabuleiro[2][2] = NAVIO;
    tabuleiro[2][3] = NAVIO;

    tabuleiro[5][4] = NAVIO;
    tabuleiro[6][4] = NAVIO;
    tabuleiro[7][4] = NAVIO;

    // 3️⃣ Criar matrizes de habilidades
    criarHabilidadeCone(cone);
    criarHabilidadeCruz(cruz);
    criarHabilidadeOctaedro(octaedro);

    // 4️⃣ Aplicar habilidades em diferentes pontos do tabuleiro
    aplicarHabilidade(tabuleiro, cone, 2, 6);       // Cone no canto superior direito
    aplicarHabilidade(tabuleiro, cruz, 5, 5);       // Cruz no centro
    aplicarHabilidade(tabuleiro, octaedro, 7, 2);   // Octaedro no canto inferior esquerdo

    // 5️⃣ Exibir tabuleiro final
    printf("\n=== TABULEIRO DE BATALHA NAVAL - NÍVEL MESTRE ===\n\n");
    exibirTabuleiro(tabuleiro);

    printf("\nLegenda: 0 = Água | 3 = Navio | 5 = Área de Habilidade\n");

    return 0;
}

/* ------------------------------
   Função: Inicializar Tabuleiro
   Preenche toda a matriz com 0 (água)
--------------------------------*/
void inicializarTabuleiro(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO]) {
    for (int i = 0; i < TAM_TABULEIRO; i++) {
        for (int j = 0; j < TAM_TABULEIRO; j++) {
            tabuleiro[i][j] = AGUA;
        }
    }
}

/* ------------------------------
   Função: Criar Habilidade Cone
   Forma de cone apontando para baixo
   Exemplo (5x5):
       0 0 1 0 0
       0 1 1 1 0
       1 1 1 1 1
--------------------------------*/
void criarHabilidadeCone(int cone[TAM_HABILIDADE][TAM_HABILIDADE]) {
    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            // Padrão de cone: ativa 1s em forma piramidal
            if (i >= 2 && (j >= 2 - i && j <= 2 + i)) {
                cone[i][j] = 1;
            } else if (i == 1 && (j >= 1 && j <= 3)) {
                cone[i][j] = 1;
            } else if (i == 0 && j == 2) {
                cone[i][j] = 1;
            } else {
                cone[i][j] = 0;
            }
        }
    }
}

/* ------------------------------
   Função: Criar Habilidade Cruz
   Exemplo (5x5):
       0 0 1 0 0
       0 0 1 0 0
       1 1 1 1 1
       0 0 1 0 0
       0 0 1 0 0
--------------------------------*/
void criarHabilidadeCruz(int cruz[TAM_HABILIDADE][TAM_HABILIDADE]) {
    int centro = TAM_HABILIDADE / 2;

    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            if (i == centro || j == centro) {
                cruz[i][j] = 1;
            } else {
                cruz[i][j] = 0;
            }
        }
    }
}

/* ------------------------------
   Função: Criar Habilidade Octaedro
   Formato de losango (vista frontal)
   Exemplo (5x5):
       0 0 1 0 0
       0 1 1 1 0
       1 1 1 1 1
       0 1 1 1 0
       0 0 1 0 0
--------------------------------*/
void criarHabilidadeOctaedro(int octaedro[TAM_HABILIDADE][TAM_HABILIDADE]) {
    int centro = TAM_HABILIDADE / 2;

    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            if (abs(i - centro) + abs(j - centro) <= centro) {
                octaedro[i][j] = 1;
            } else {
                octaedro[i][j] = 0;
            }
        }
    }
}

/* ------------------------------
   Função: Aplicar Habilidade
   Sobrepõe a matriz de habilidade no tabuleiro
   sem ultrapassar os limites.
--------------------------------*/
void aplicarHabilidade(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO],
                       int habilidade[TAM_HABILIDADE][TAM_HABILIDADE],
                       int origemLinha, int origemColuna) {
    int offset = TAM_HABILIDADE / 2;

    for (int i = 0; i < TAM_HABILIDADE; i++) {
        for (int j = 0; j < TAM_HABILIDADE; j++) {
            // Cálculo da posição no tabuleiro
            int linhaTab = origemLinha - offset + i;
            int colunaTab = origemColuna - offset + j;

            // Verifica se está dentro dos limites do tabuleiro
            if (linhaTab >= 0 && linhaTab < TAM_TABULEIRO &&
                colunaTab >= 0 && colunaTab < TAM_TABULEIRO) {

                // Se a habilidade tem efeito nesta posição, marca com 5 (HABILIDADE)
                if (habilidade[i][j] == 1 && tabuleiro[linhaTab][colunaTab] == AGUA) {
                    tabuleiro[linhaTab][colunaTab] = HABILIDADE;
                }
            }
        }
    }
}

/* ------------------------------
   Função: Exibir Tabuleiro
   Mostra 0, 3 e 5 organizadamente
--------------------------------*/
void exibirTabuleiro(int tabuleiro[TAM_TABULEIRO][TAM_TABULEIRO]) {
    printf("    ");
    for (int j = 0; j < TAM_TABULEIRO; j++) {
        printf("%2d ", j);
    }
    printf("\n   ---------------------------------------------\n");

    for (int i = 0; i < TAM_TABULEIRO; i++) {
        printf("%2d |", i);
        for (int j = 0; j < TAM_TABULEIRO; j++) {
            printf(" %d ", tabuleiro[i][j]);
        }
        printf("\n");
    }
}
